import 'dart:math';
import 'dart:convert';

class CodeGenerator {
  static const String letters =
      'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
  static const String allowedChars = '0123456789$letters';
  static const int numberOfCodePoints = allowedChars.length;
  static const int codeSize = 11;
  static final RegExp codePattern = RegExp(r'^[a-zA-Z]{1}[a-zA-Z0-9]{10}$');

  /// Generates a UID according to the following rules:
  /// - Alphanumeric characters only.
  /// - Exactly 11 characters long.
  /// - First character is alphabetic.
  static String generateUid() {
    return generateCode(codeSize);
  }

  /// Generates a composite UID in the format `uid-uid`.
  ///
  /// Each `uid` consists of 11 alphanumeric characters generated by [generateUid()].
  /// The resulting string will be 23 characters long, formatted as `xxxxxxxxxxx-xxxxxxxxxxx`.
  ///
  /// This format can be useful for cases where a larger or more unique identifier is required.
  static String generateCompositeUid() {
    return '${generateUid()}-${generateUid()}';
  }

  /// Generates a pseudo random string with alphanumeric characters.
  ///
  /// The [codeSize] parameter specifies the number of characters in the code.
  static String generateCode(int codeSize) {
    final random = Random();
    final randomChars = List.generate(codeSize, (i) {
      return i == 0
          ? letters[random.nextInt(letters.length)]
          : allowedChars[random.nextInt(numberOfCodePoints)];
    });

    return randomChars.join();
  }

  /// Generates a cryptographically strong random token encoded in Base64.
  ///
  /// The [lengthInBytes] parameter specifies the length in bytes of the token.
  static String getRandomSecureToken(int lengthInBytes) {
    final secureRandom = Random.secure();
    final tokenBytes =
        List<int>.generate(lengthInBytes, (_) => secureRandom.nextInt(256));

    return base64Url.encode(tokenBytes).replaceAll('=', '');
  }

  /// Tests whether the given code is a valid UID.
  ///
  /// The [code] parameter specifies the code to validate.
  static bool isValidUid(String code) {
    return codePattern.hasMatch(code);
  }
}

void main() {
  // Test the UID generation
}
